'use strict';
//AXIOS入口文件
//引入工具
import utils from './utils.js';
//引入绑定函数
import bind from './helpers/bind.js';
//引入AXIOS主文件
import Axios from './core/Axios.js';
//引入合并配置的函数
import mergeConfig from './core/mergeConfig.js';
//导入默认配置
import defaults from './defaults/index.js';
import formDataToJSON from './helpers/formDataToJSON.js';
import CanceledError from './cancel/CanceledError.js';
import CancelToken from './cancel/CancelToken.js';
import isCancel from './cancel/isCancel.js';
import {VERSION} from './env/data.js';
import toFormData from './helpers/toFormData.js';
import AxiosError from './core/AxiosError.js';
import spread from './helpers/spread.js';
import isAxiosError from './helpers/isAxiosError.js';

/**
 * Create an instance of Axios
 * 创建AXIOS实例对象
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  // 创建实例对象context
  const context = new Axios(defaultConfig);
  // 将request方法的this指向context并返回新函数 instace 可以用作函数使用，并返回
  const instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  // 将Axios.prototype和实例对象的方法都添加到instance函数身上
  utils.extend(instance, Axios.prototype, context, {allOwnKeys: true});

  // Copy context to instance
  // 将实例对象的方法和属性扩展到instance函数身上
  utils.extend(instance, context, null, {allOwnKeys: true});

  // Factory for creating new instances
  // 工厂函数 用来返回创建实例对象的函数
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
// 通过配置创建AXIOS函数
const axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
// axios添加 Axios属性，属性值为构造函数对象axios.CancelToken = CancelToken  new axios.Axios();
axios.Axios = Axios;

// Expose Cancel & CancelToken
axios.CanceledError = CanceledError;
axios.CancelToken = CancelToken;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData;

// Expose AxiosError class
axios.AxiosError = AxiosError;

// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = spread;

//简单实现全局暴露AXIOS
window.axios = axios;

// Expose isAxiosError
axios.isAxiosError = isAxiosError;

axios.formToJSON = thing => {
  return formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);
};

export default axios
